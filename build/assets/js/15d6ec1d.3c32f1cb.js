"use strict";(self.webpackChunksf_documentation=self.webpackChunksf_documentation||[]).push([[2878],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(b,o(o({ref:t},c),{},{components:n})):r.createElement(b,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6012:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],s={},l="RabbitMQ on Instances",u={unversionedId:"Integrations/rabbitmqinstance",id:"Integrations/rabbitmqinstance",title:"RabbitMQ on Instances",description:"Monitoring RabbitMQ Message Broker running on Instances",source:"@site/docs/Integrations/rabbitmqinstance.md",sourceDirName:"Integrations",slug:"/Integrations/rabbitmqinstance",permalink:"/docs/Integrations/rabbitmqinstance",editUrl:"https://github.com/ram-dot-kumar/SFwebsite.git/docs/Integrations/rabbitmqinstance.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Monitoring Postgres databases running on cloud services (Amazon RDS) using sfPoller",permalink:"/docs/Integrations/postgres/postgres_sfpoller"},next:{title:"RabbitMQ in Kubernetes",permalink:"/docs/Integrations/rabbitmqkubernet"}},c={},p=[{value:"Monitoring RabbitMQ Message Broker running on Instances",id:"monitoring-rabbitmq-message-broker-running-on-instances",level:2},{value:"Overview",id:"overview",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Metrics",id:"metrics",level:2},{value:"plugins\u202f",id:"plugins",level:3},{value:"Parameters required in metrics plugin\u202f\u202f",id:"parameters-required-in-metrics-plugin",level:3},{value:"Viewing data and dashboards",id:"viewing-data-and-dashboards",level:3}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rabbitmq-on-instances"},"RabbitMQ on Instances"),(0,i.kt)("h2",{id:"monitoring-rabbitmq-message-broker-running-on-instances"},"Monitoring RabbitMQ Message Broker running on Instances"),(0,i.kt)("h3",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Rabbitmq ",(0,i.kt)("a",{parentName:"p",href:"/docs/Quick_Start/getting_started#sfagent"},"sfAgent")," plugin provides metrics related to RabbitMQ message broker.  "),(0,i.kt)("p",null,"Metrics collected by the plugin are organized across the following categories"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"clusterDetails"),(0,i.kt)("li",{parentName:"ul"},"nodeStats"),(0,i.kt)("li",{parentName:"ul"},"connectionStats"),(0,i.kt)("li",{parentName:"ul"},"channelStats"),(0,i.kt)("li",{parentName:"ul"},"exchangeStats"),(0,i.kt)("li",{parentName:"ul"},"queueStats"),(0,i.kt)("li",{parentName:"ul"},"consumerStats")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," node-is-quorum-critical and node-is-mirror-sync-critical is supported on 3.9 and above."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Tested on:")," RabbitMQ version 3.9 and 3.7"),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/Quick_Start/getting_started#sfagent"},"sfAgent")," section provides steps to install and automatically generate plugin configurations. User can also manually add the configuration shown below to config.yaml under /opt/sfagent/ directory"),(0,i.kt)("h2",{id:"metrics"},"Metrics"),(0,i.kt)("h3",{id:"plugins"},"plugins\u202f"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"      name: rabbitmq\n      enabled: true\n      interval: 60\n      config:\n        documentsTypes:\n          - clusterDetails\n          - nodeStats\n          - connectionStats\n          - channelStats\n          - exchangeStats\n          - queueStats\n          - consumerStats\n        host: localhost\n        password: <password>\n        port: 15672\n        secure: false\n        username: <username>\n\n")),(0,i.kt)("h3",{id:"parameters-required-in-metrics-plugin"},"Parameters required in metrics plugin\u202f\u202f"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Username: username of the RabbitMQ user"),(0,i.kt)("li",{parentName:"ul"},"password: password for RabbitMQ"),(0,i.kt)("li",{parentName:"ul"},"port: Broker Port"),(0,i.kt)("li",{parentName:"ul"},"secure: http(false) or https(true)"),(0,i.kt)("li",{parentName:"ul"},"documentTypes: User can either leave this empty to collect all documentTypes or mention specific documentTypes to collect. Available options for plugin type RabbitMQ are clusterDetails, nodeStats, connectionStats, exchangeStats, queueStats, consumerStats")),(0,i.kt)("h3",{id:"viewing-data-and-dashboards"},"Viewing data and dashboards"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Data generated by plugin can be viewed in browse data page inside the respective application under plugin=RabbitMQ and documentType=Cluster_details."),(0,i.kt)("li",{parentName:"ul"},"Dashboard for this data can be instantiated by Importing dashboard template RabbitMQ to the application dashboard.")))}m.isMDXComponent=!0}}]);