"use strict";(self.webpackChunksf_documentation=self.webpackChunksf_documentation||[]).push([[3870],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(t),p=r,g=m["".concat(l,".").concat(p)]||m[p]||b[p]||i;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5639:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return b}});var a=t(3117),r=t(102),i=(t(7294),t(3905)),o=["components"],s={},l="RabbitMQ in Kubernetes",u={unversionedId:"Integrations/rabbitmqkubernet",id:"Integrations/rabbitmqkubernet",title:"RabbitMQ in Kubernetes",description:"Monitoring RabbitMQ Message Broker running on Kubernetes",source:"@site/docs/Integrations/rabbitmqkubernet.md",sourceDirName:"Integrations",slug:"/Integrations/rabbitmqkubernet",permalink:"/docs/Integrations/rabbitmqkubernet",editUrl:"https://github.com/ram-dot-kumar/SFwebsite.git/docs/Integrations/rabbitmqkubernet.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RabbitMQ on Instances",permalink:"/docs/Integrations/rabbitmqinstance"},next:{title:"Monitoring Redis on instances",permalink:"/docs/Integrations/redis"}},c={},b=[{value:"Monitoring RabbitMQ Message Broker running on Kubernetes",id:"monitoring-rabbitmq-message-broker-running-on-kubernetes",level:2},{value:"MySQL monitoring with sfKubeAgent",id:"mysql-monitoring-with-sfkubeagent",level:3},{value:"ConfigMap for RabbitMQ sfKubeAgent:",id:"configmap-for-rabbitmq-sfkubeagent",level:3},{value:"RabbitMQ YAML(Statefulset)",id:"rabbitmq-yamlstatefulset",level:3},{value:"Parameters required in metrics plugin",id:"parameters-required-in-metrics-plugin",level:3},{value:"Viewing data and dashboards",id:"viewing-data-and-dashboards",level:3}],m={toc:b};function p(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"rabbitmq-in-kubernetes"},"RabbitMQ in Kubernetes"),(0,i.kt)("h2",{id:"monitoring-rabbitmq-message-broker-running-on-kubernetes"},"Monitoring RabbitMQ Message Broker running on Kubernetes"),(0,i.kt)("p",null,"RabbitMQ\u202frunning\u202fin\u202fKubernetes\u202fcan\u202fbe\u202fmonitored\u202fin\u202fSnappyFlow\u202fusing:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/Integrations/kubernetes/sfkubeagent_installation"},"sfKubeAgent")," as\u202fsidecar\u202fcontainer.")),(0,i.kt)("h3",{id:"mysql-monitoring-with-sfkubeagent"},"MySQL monitoring with sfKubeAgent"),(0,i.kt)("p",null,"In this approach, ",(0,i.kt)("a",{parentName:"p",href:"/docs/Integrations/kubernetes/sfkubeagent_installation"},"sfKubeAgent")," is run as a side-car inside RabbitMQ pod. The example below shows the config-map for sfKubeAgent container, config-map for RabbitMQ container and pod yaml."),(0,i.kt)("h3",{id:"configmap-for-rabbitmq-sfkubeagent"},"ConfigMap for RabbitMQ sfKubeAgent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: rabbitmq-sfagent-config\ndata:\n  config.yaml: |-\n    key: "<profile key>"\n    metrics:\n      plugins:\n        - name: rabbitmq\n          enabled: true\n          interval: 60\n          config:\n            documentsTypes:\n              - clusterDetails\n              - nodeStats\n              - connectionStats\n              - channelStats\n              - exchangeStats\n              - queueStats\n              - consumerStats\n            host: localhost\n            password: <password>\n            secure: false\n            port: 15672\n            username: <username>\n    agent:\n      loglevel: debug\n\n')),(0,i.kt)("h3",{id:"rabbitmq-yamlstatefulset"},"RabbitMQ YAML(Statefulset)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n name: rabbitmqcluster\nspec:\n replicas: 3\n serviceName: rabbitmqcluster-headless\n template:\n   spec:\n     containers:\n     - command:\n       - /app/sfagent\n       - -config-file\n       - /opt/sfagent/config.yaml\n       - -enable-console-log\n       env:\n       - name: APP_NAME\n         value: rabbitmq\n       - name: PROJECT_NAME\n         value: rabbitmq-kube\n       image: snappyflowml/sfagent:latest\n       imagePullPolicy: Always\n       name: rabbitmq-sfagent\n       resources:\n         limits:\n           cpu: 500m\n           memory: 500Mi\n         requests:\n           cpu: 100m\n           memory: 128Mi\n       terminationMessagePath: /dev/termination-log\n       terminationMessagePolicy: File\n       volumeMounts:\n       - mountPath: /opt/sfagent/config.yaml\n         name: sfagent\n         subPath: config.yaml\n     securityContext:\n       fsGroup: 1001\n     volumes:\n     - configMap:\n         defaultMode: 420\n         name: rabbitmq-sfagent-config\n       name: sfagent\n\n")),(0,i.kt)("h3",{id:"parameters-required-in-metrics-plugin"},"Parameters required in metrics plugin"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Username: username of the RabbitMQ user"),(0,i.kt)("li",{parentName:"ul"},"password: password for RabbitMQ"),(0,i.kt)("li",{parentName:"ul"},"port: Broker Port"),(0,i.kt)("li",{parentName:"ul"},"secure: http(false) or https(true)"),(0,i.kt)("li",{parentName:"ul"},"documentTypes: User can either leave this empty to collect all documentTypes or mention specific documentTypes to collect. Available options for plugin type RabbitMQ are clusterDetails, nodeStats, connectionStats, exchangeStats, queueStats, consumerStats")),(0,i.kt)("h3",{id:"viewing-data-and-dashboards"},"Viewing data and dashboards"),(0,i.kt)("p",null,"Data collected by plugins can be viewed in SnappyFlow\u2019s browse data section"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"plugin: rabbitmq"),(0,i.kt)("li",{parentName:"ul"},"documentType: clusterDetails, nodeStats, connectionStats, exchangeStats, queueStats, consumerStats"),(0,i.kt)("li",{parentName:"ul"},"Dashboard template: RabbitMQ")))}p.isMDXComponent=!0}}]);